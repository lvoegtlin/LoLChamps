/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import apirequests.APIRequestGetCurrentChampion;
import controller.Controller;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.TimerTask;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Champion;

/**
 *
 * @author larsvoegtlin
 */
public class LoLChapStatsBEV extends javax.swing.JFrame {

    private ArrayList<Champion> allChampions;

    /**
     * Creates new form LoLChapStatsBEV
     */
    public LoLChapStatsBEV() {
        initComponents();
        this.setTitle("League of Legends stats viewer");

        if (!Controller.getInstance().isServieAnable()) {
            JOptionPane.showMessageDialog(getContentPane(), "Automatic champion check isn't available! You have to choose your champion manually.", "Service not available", JOptionPane.WARNING_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectChampion = new javax.swing.JComboBox();
        summonerNameField = new javax.swing.JTextField();
        chooseRegion = new javax.swing.JComboBox();
        exit = new javax.swing.JButton();
        execute = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        getChampionsButton = new javax.swing.JButton();
        refreshChampions = new javax.swing.JButton();
        stats = new javax.swing.JLabel();
        printFile = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectChampion.setEnabled(!Controller.getInstance().isServieAnable());

        Preferences root = Preferences.userNodeForPackage(LoLChapStatsBEV.class);
        String userName = root.get("username", "Summoner name");
        summonerNameField.setText(userName);

        chooseRegion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "euw", "eune", "na" }));

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        execute.setText("2. Get statistic of this champion");
        execute.setEnabled(!Controller.getInstance().isServieAnable());
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        jLabel1.setText("(c) by Lars 'EcrOp' VÃ¶gtlin & Binary Evasion");

        if(Controller.getInstance().isServieAnable()){
            getChampionsButton.setText("OK");
        } else {
            getChampionsButton.setText("1. Get champions of region");
        }
        getChampionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getChampionsButtonActionPerformed(evt);
            }
        });

        refreshChampions.setText("3. Refresh Champions");
        refreshChampions.setEnabled(!Controller.getInstance().isServieAnable());
        refreshChampions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshChampionsActionPerformed(evt);
            }
        });

        stats.setText("Champion stats");

        printFile.setSelected(true);
        printFile.setText("Print file");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel1)
                .add(183, 183, 183))
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(layout.createSequentialGroup()
                        .add(printFile)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(getChampionsButton))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(execute)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(exit))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(refreshChampions)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(selectChampion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(summonerNameField)
                        .add(18, 18, 18)
                        .add(chooseRegion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(71, 71, 71)
                .add(stats, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(57, 57, 57)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(summonerNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(chooseRegion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(getChampionsButton)
                            .add(printFile))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(selectChampion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(refreshChampions))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(exit)
                            .add(execute)))
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(stats, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(23, 23, 23)
                .add(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        Controller.getInstance().clearFile();
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
        String champName = selectChampion.getSelectedItem().toString();
        if (champName.contains("(Has stats)")) {
            champName = champName.replace("   (Has stats)", "");
        }
        Champion champ = Controller.getInstance().getChampionByName(champName);
        if (printFile.isSelected()) {
            Controller.getInstance().writeInOutputFile(champ);
        }
        stats.setText("<html>" + "Champion stats: <br><br>" + champ.toLable() + "</html>");
    }//GEN-LAST:event_executeActionPerformed

    private void getChampionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getChampionsButtonActionPerformed
        Controller cnt = Controller.getInstance();
        cnt.loadAllChampions(chooseRegion.getSelectedItem().toString());
        cnt.saveRegion(chooseRegion.getSelectedItem().toString());
        cnt.setRegion(chooseRegion.getSelectedItem().toString());
        cnt.saveUsername(summonerNameField.getText());
        String summonerName = summonerNameField.getText().replaceAll(" ", "%20");
        summonerName = summonerName.toLowerCase();
        cnt.setSummonerName(summonerName);

        cnt.getSummonerIdFromServer();
        allChampions = cnt.getAllChampions();
        cnt.completeChampionsObjects();
        for (Champion champ : allChampions) {
            String stat = "";
            if (champ.isHasStats()) {
                stat = "   (Has stats)";
            }
            selectChampion.addItem(champ.getName() + stat);
        }

        if (cnt.isServieAnable()) {
            Timer timer = new Timer();
            timer.scheduleAtFixedRate(new updateCurrentChampion(), 0, 5000);
        }
    }//GEN-LAST:event_getChampionsButtonActionPerformed

    private void refreshChampionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshChampionsActionPerformed
        Controller.getInstance().completeChampionsObjects();
        for (Champion champ : allChampions) {
            String stat = "";
            if (champ.isHasStats()) {
                stat = "   (Has stats)";
            }
            selectChampion.addItem(champ.getName() + stat);
        }
    }//GEN-LAST:event_refreshChampionsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoLChapStatsBEV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoLChapStatsBEV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoLChapStatsBEV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoLChapStatsBEV.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //getting server status
        APIRequestGetCurrentChampion api = new APIRequestGetCurrentChampion();
        String status = api.getCurrentChampion("ecrop");


        Preferences root = Preferences.userNodeForPackage(LoLChapStatsBEV.class);
        String userName = root.get("username", "");
        String region = root.get("region", "");
        try {
            Controller.getInstance().setSummonerName(URLEncoder.encode(userName, "UTF-8"));
            Controller.getInstance().setRegion(region);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(LoLChapStatsBEV.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (status.matches("FALSE")) {
            Controller.getInstance().setServieAnable(false);
        } else {
            Controller.getInstance().setServieAnable(true);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoLChapStatsBEV().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox chooseRegion;
    private javax.swing.JButton execute;
    private javax.swing.JButton exit;
    private javax.swing.JButton getChampionsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JCheckBox printFile;
    private javax.swing.JButton refreshChampions;
    private javax.swing.JComboBox selectChampion;
    private javax.swing.JLabel stats;
    private javax.swing.JTextField summonerNameField;
    // End of variables declaration//GEN-END:variables

    class updateCurrentChampion extends TimerTask {

        @Override
        public void run() {
            Controller cnt = Controller.getInstance();
            if (cnt.isServieAnable() && !cnt.getSummonerName().equals("") && !cnt.getRegion().equals("")) {
                APIRequestGetCurrentChampion api = new APIRequestGetCurrentChampion();
                String champion = api.getCurrentChampion(Controller.getInstance().getSummonerName());
                System.out.println(champion);
                if (cnt.getSummenorId() == 0) {
                    cnt.getSummonerIdFromServer();
                }
                if (cnt.getAllChampions().isEmpty()) {
                    cnt.loadAllChampions(cnt.getRegion());
                }
                allChampions = cnt.getAllChampions();
                cnt.completeChampionsObjects();

                //update server status
                if (champion.matches("FALSE")) {
                    cnt.setServieAnable(false);
                    JOptionPane.showMessageDialog(getContentPane(), "Automatic champion check isn't available! You have to choose your champion manually.", "Service not available", JOptionPane.WARNING_MESSAGE);
                } else {
                    cnt.setServieAnable(true);
                }

                if (champion.matches("NOT INGAME")) {
                    cnt.clearFile();
                    stats.setText("<html>" + "Champion stats: <br><br>" + "Not ingame" + "</html>");
                    return;
                }

                if (printFile.isSelected()) {
                    cnt.writeInOutputFile(cnt.getChampionByName(champion));
                }
                stats.setText("<html>Champion stats: <br><br>" + cnt.getChampionByName(champion).toLable() + "</html>");
            }
        }
    }
}
